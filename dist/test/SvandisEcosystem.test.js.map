{"version":3,"sources":["../../test/SvandisEcosystem.test.js"],"names":["web3Instance","require","Web3","RLP","SvandisDataRegistry","artifacts","SvandisDataFactory","TokenScreenerFactory","IcoScreenerFactory","Ecosystem","Token","IcoScreener","TokenScreener","ClaimHolder","UserRegistry","ClaimHolderLibrary","KeyHolderLibrary","ClaimHolderPresigned","BigNumber","web3","should","use","signature_1","signature_2","dataHash_1","dataHash_2","dataString","nullAddress","contract","wallet","Promise","eth","getTransactionCount","err","count","resolve","nonce","address","utils","sha3","encode","substring","toString","predictIdentityAddress","owner","unknown","newuser","swappeduser","extrauser","svandisDataRegistry","svandisDataFactory","tokenScreenerFactory","icoScreenerFactory","name","ticker","website","dataLoad","tokenGenerationEventTimestamp","newDataLoad","tokenScreener","icoScreener","ecoSystem","token","userRegistry","before","new","transferOwnership","it","keyLibrary","link","claimLibrary","from","be","fulfilled","setSvandisDataRegistry","assert","getTokenScreenerCount","equal","createNewTokenScreener","tokenScreenerTx","logs","args","svandisDataLocation","at","screener","getIcoScreenerCount","createNewIcoScreener","icoScreenerTx","predictAddress","claimType_1","hashed","soliditySha3","prvSigner1","randomHex","accounts","sign","signed","claimType_2","prvSigner2","hashed2","signed2","attestation_1","claimType","scheme","issuer","signature","data","uri","attestation_2","users","createNewCentralizedUser","slice","instance","getIdentityFromRegistry","updateTx","identityAddress","ok","notEqual","currentDataHash","oldHash","updateSvandisData","swapMainKeyForSvandisCentralizedUserAccounts","addExtraKeyForSvandisCentralizedUserAccounts","removeUser"],"mappings":"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","file":"SvandisEcosystem.test.js","sourcesContent":["'use strict'\r\nvar web3Instance = require(\"web3\");\r\nvar Web3 = new web3Instance('ws://localhost:9545');\r\nvar RLP = require('rlp');\r\nconst SvandisDataRegistry = artifacts.require('./SvandisDataRegistry.sol');\r\nconst SvandisDataFactory = artifacts.require('./SvandisDataFactory.sol');\r\nconst TokenScreenerFactory = artifacts.require('./TokenScreenerFactory.sol');\r\nconst IcoScreenerFactory = artifacts.require('./IcoScreenerFactory.sol');\r\nconst Ecosystem = artifacts.require('./SvandisEcosystem.sol');\r\nconst Token = artifacts.require('./SvandisToken.sol');\r\nconst IcoScreener = artifacts.require('./IcoScreener.sol');\r\nconst TokenScreener = artifacts.require('./TokenScreener.sol');\r\n\r\n\r\nconst ClaimHolder = artifacts.require(\"ClaimHolder.sol\");\r\nconst UserRegistry = artifacts.require(\"UserRegistry.sol\");\r\nconst ClaimHolderLibrary = artifacts.require(\"ClaimHolderLibrary.sol\");\r\nconst KeyHolderLibrary = artifacts.require(\"KeyHolderLibrary.sol\");\r\nconst ClaimHolderPresigned = artifacts.require(\"ClaimHolderPresigned.sol\");\r\n\r\nconst BigNumber = web3.BigNumber;\r\n\r\nconst should = require('chai')\r\n\t.use(require('chai-as-promised'))\r\n\t.use(require('chai-bignumber')(BigNumber))\r\n\t.should();\r\n\r\nconst signature_1 = \"0xeb6123e537e17e2c67b67bbc0b93e6b25ea9eae276c4c2ab353bd7e853ebad2446cc7e91327f3737559d7a9a90fc88529a6b72b770a612f808ab0ba57a46866e1c\"\r\nconst signature_2 = \"0x061ef9cdd7707d90d7a7d95b53ddbd94905cb05dfe4734f97744c7976f2776145fef298fd0e31afa43a103cd7f5b00e3b226b0d62e4c492d54bec02eb0c2a0901b\"\r\n\r\nconst dataHash_1 = \"0x4f32f7a7d40b4d65a917926cbfd8fd521483e7472bcc4d024179735622447dc9\"\r\nconst dataHash_2 = \"0xa183d4eb3552e730c2dd3df91384426eb88879869b890ad12698320d8b88cb48\"\r\nconst dataString ='CREATE NEW ACCOUNT'\r\nconst nullAddress = \"0x0000000000000000000000000000000000000000\"\r\n\r\ncontract('SvandisEcosystem', function ([owner, unknown, newuser, swappeduser, extrauser]) {\r\n\r\n\tlet svandisDataRegistry;\r\n\tlet svandisDataFactory;\r\n\tlet tokenScreenerFactory;\r\n\tlet icoScreenerFactory;\r\n\tlet name, ticker, website, dataLoad, tokenGenerationEventTimestamp;\r\n\tlet newDataLoad;\r\n\r\n\tlet tokenScreener;\r\n\tlet icoScreener;\r\n\tlet ecoSystem;\r\n\tlet token;\r\n\tlet userRegistry;\r\n\r\n\tbefore(async function () {\r\n\t\ttokenScreenerFactory = await TokenScreenerFactory.new();\r\n\t\ticoScreenerFactory = await IcoScreenerFactory.new();\r\n\r\n\t\tname = \"Svandis\";\r\n\t\tticker = 'SVN';\r\n\t\twebsite= \"https://svandis.io\";\r\n\t\t//Demo for how we will change data load and create different hash on chain from them.\r\n\t\tdataLoad = [0x76, 0x22, 0x2a];\r\n\t\tnewDataLoad = [0x21, 0x99, 0xdf];\r\n\t\ttokenGenerationEventTimestamp = 1546300800;\r\n\r\n\t\tsvandisDataFactory = await SvandisDataFactory.new(tokenScreenerFactory.address, icoScreenerFactory.address);\r\n\r\n\t\tawait tokenScreenerFactory.transferOwnership(svandisDataFactory.address);\r\n\t\tawait icoScreenerFactory.transferOwnership(svandisDataFactory.address);\r\n\r\n\t\tsvandisDataRegistry = await SvandisDataRegistry.new(svandisDataFactory.address);\r\n\t\tawait svandisDataFactory.transferOwnership(svandisDataRegistry.address);\r\n\t\ttoken = await Token.new();\r\n\t});\r\n\r\n\r\n\tit('should setup the ecosystem', async function () {\r\n\t\tlet keyLibrary = await KeyHolderLibrary.new();\r\n\t\tawait ClaimHolderLibrary.link('KeyHolderLibrary', keyLibrary.address);\r\n\t\tlet claimLibrary = await ClaimHolderLibrary.new();\r\n\t\tawait Ecosystem.link('KeyHolderLibrary', keyLibrary.address);\r\n\t\tawait Ecosystem.link('ClaimHolderLibrary', claimLibrary.address);\r\n\t\tawait ClaimHolderPresigned.link('KeyHolderLibrary', keyLibrary.address);\r\n\t\tawait ClaimHolderPresigned.link('ClaimHolderLibrary', claimLibrary.address);\r\n        userRegistry = await UserRegistry.new({from: owner});\r\n\t\tecoSystem = await Ecosystem.new(token.address, svandisDataRegistry.address, userRegistry.address, {from: owner});\r\n\t\tawait svandisDataRegistry.transferOwnership(ecoSystem.address).should.be.fulfilled;\r\n\t});\r\n\r\n\r\n\tit('should allow to change data registry address', async function () {\r\n\t\tawait ecoSystem.setSvandisDataRegistry(tokenScreenerFactory.address, {from: owner}).should.be.fulfilled;\r\n\t\tawait ecoSystem.setSvandisDataRegistry(svandisDataRegistry.address, {from: owner}).should.be.fulfilled;\r\n\t});\r\n\r\n\r\n\tit('should create a new token screener', async function () {\r\n\t\tassert.equal(await svandisDataRegistry.getTokenScreenerCount(), 0);\r\n\t\tlet tokenScreenerTx = await ecoSystem.createNewTokenScreener(\r\n\t\t\tname,\r\n\t\t\tticker,\r\n\t\t\twebsite,\r\n\t\t\tdataLoad,\r\n\t\t\t{from: owner});\r\n\t\ttokenScreener = tokenScreenerTx.logs[0].args.svandisDataLocation;\r\n\t\tvar screener = await TokenScreener.at(tokenScreener);\r\n\t\tassert.equal(await screener.name(), name);\r\n\t\tassert.equal(await svandisDataRegistry.getTokenScreenerCount(), 1);\r\n\t});\r\n\r\n\r\n\tit('should create a new ico screener', async function () {\r\n\t\tassert.equal(await svandisDataRegistry.getIcoScreenerCount(), 0);\r\n\t\tlet icoScreenerTx = await ecoSystem.createNewIcoScreener(\r\n\t\t\tname,\r\n\t\t\tticker,\r\n\t\t\twebsite,\r\n\t\t\tdataLoad,\r\n\t\t\ttokenGenerationEventTimestamp,\r\n\t\t\t{from: owner});\r\n\t\ticoScreener = icoScreenerTx.logs[0].args.svandisDataLocation;\r\n\t\tvar screener = await IcoScreener.at(icoScreener);\r\n\t\tassert.equal(await screener.name(), name);\r\n\t\tassert.equal(await svandisDataRegistry.getIcoScreenerCount(), 1);\r\n\t});\r\n\r\n\tasync function predictIdentityAddress(wallet) {\r\n\t\tconst nonce = await new Promise(resolve => {\r\n\t\t\tWeb3.eth.getTransactionCount(wallet, (err, count) => {\r\n\t\t\t\tresolve(count)\r\n\t\t\t})\r\n\t\t})\r\n\t\tconst address =\r\n\t\t\t'0x' + Web3.utils.sha3(RLP.encode([wallet, nonce])).substring(26, 66)\r\n\t\treturn address.toString()\r\n\t}\r\n\r\n\tit('should get claim holder from user registry after creating user properly', async function () {\r\n\t\tlet predictAddress = await predictIdentityAddress(ecoSystem.address);\r\n\t\tvar claimType_1 = 1;\r\n\t\tvar hashed = Web3.utils.soliditySha3(predictAddress, claimType_1, dataHash_1);\r\n\t\tlet prvSigner1 = Web3.utils.randomHex(32);\r\n\t\tvar signed = await Web3.eth.accounts.sign(hashed, prvSigner1);\r\n\t\tvar claimType_2 = 2;\r\n\t\tlet prvSigner2 = Web3.utils.randomHex(32);\r\n\t\tvar hashed2 = Web3.utils.sha3(predictAddress, claimType_2, dataHash_2);\r\n\t\tvar signed2 = await Web3.eth.accounts.sign(hashed2, prvSigner2);\r\n\r\n\t\tlet attestation_1 = {\r\n\t\t\tclaimType: claimType_1,\r\n\t\t\tscheme: 1,\r\n\t\t\tissuer: owner,\r\n\t\t\tsignature: signed.signature,\r\n\t\t\tdata: hashed,\r\n\t\t\turi: \"\"\r\n\t\t};\r\n\t\tlet attestation_2 = {\r\n\t\t\tclaimType: claimType_2,\r\n\t\t\tscheme: 1,\r\n\t\t\tissuer: owner,\r\n\t\t\tsignature: signed2.signature,\r\n\t\t\tdata: hashed2,\r\n\t\t\turi: \"\"\r\n\t\t};\r\n\r\n\t\tassert.equal(await userRegistry.users(newuser), nullAddress);\r\n\t\tlet instance = await ecoSystem.createNewCentralizedUser(\r\n\t\t\tnewuser,\r\n\t\t\t[ attestation_1.claimType, attestation_2.claimType ],\r\n\t\t\t[ attestation_1.issuer, attestation_2.issuer ],\r\n\t\t\tattestation_1.signature + attestation_2.signature.slice(2),\r\n\t\t\tattestation_1.data + attestation_2.data.slice(2),\r\n\t\t\t[32, 32], {from: owner}).should.be.fulfilled;\r\n\r\n\t\tlet updateTx = await ecoSystem.getIdentityFromRegistry(\r\n\t\t\tnewuser).should.be.fulfilled;\r\n\t\tlet identityAddress = await userRegistry.users(newuser);\r\n\t\tassert.ok(identityAddress);\r\n\t\tassert.notEqual(identityAddress, nullAddress);\r\n\t});\r\n\r\n\tit('should update a screener', async function () {\r\n\t\tvar screener = await IcoScreener.at(icoScreener);\r\n\t\tlet oldHash = await screener.currentDataHash();\r\n\t\tlet updateTx = await ecoSystem.updateSvandisData(\r\n\t\t\ticoScreener,\r\n\t\t\tnewDataLoad,\r\n\t\t\t[newuser],\r\n\t\t\t[10],\r\n\t\t\t[true],\r\n\t\t\t{from: owner}).should.be.fulfilled;\r\n\t\tassert.notEqual(await screener.currentDataHash(), oldHash);\r\n\t});\r\n\r\n\tit('should allow to swap key', async function () {\r\n\t\tawait ecoSystem.swapMainKeyForSvandisCentralizedUserAccounts(newuser, swappeduser,  {from: owner}).should.be.fulfilled;\r\n\t});\r\n\r\n\tit('should allow to add an extra key to svandis centralized (key managed) accounts', async function () {\r\n\t\tawait ecoSystem.addExtraKeyForSvandisCentralizedUserAccounts(swappeduser, extrauser,  {from: owner}).should.be.fulfilled;\r\n\t});\r\n\r\n\tit('should allow to delete that user', async function () {\r\n\t\tawait ecoSystem.removeUser(swappeduser, {from: owner}).should.be.fulfilled;\r\n\t});\r\n});"]}