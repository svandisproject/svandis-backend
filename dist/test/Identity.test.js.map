{"version":3,"sources":["../../test/Identity.test.js"],"names":["BigNumber","web3","RLP","require","should","use","web3Instance","Web3","ClaimHolderPresigned","artifacts","KeyHolderLibrary","ClaimHolderLibrary","UserRegistry","prvSigner1","utils","randomHex","attestation_1","data_text_1","dataHash_1","asciiToHex","contract","wallet","Promise","eth","getTransactionCount","err","count","resolve","nonce","address","sha3","encode","substring","toString","predictIdentityAddress","claimHolder","userRegistry","beforeEach","new","from","accounts","keyLibrary","link","claimLibrary","it","claimType_1","predictAddress","hashed","soliditySha3","sign","signed","claimType","scheme","issuer","signature","data","uri","claimId","length","assert","equal","getClaim","fetchedClaim","ok","toNumber","acctSha3","keccak256","getKey","res"],"mappings":"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","file":"Identity.test.js","sourcesContent":["//This structure for ERC725/735 implements Origin Protocol Source Code\n//https://github.com/OriginProtocol/origin-js/tree/master/contracts\nconst BigNumber = web3.BigNumber;\nvar RLP = require('rlp');\nconst should = require('chai')\n\t.use(require('chai-as-promised'))\n\t.use(require('chai-bignumber')(BigNumber))\n\t.should();\nvar web3Instance = require(\"web3\");\nvar Web3 = new web3Instance('ws://localhost:9545');\n\nconst ClaimHolderPresigned = artifacts.require(\"ClaimHolderPresigned.sol\")\nconst KeyHolderLibrary = artifacts.require(\"KeyHolderLibrary\")\nconst ClaimHolderLibrary = artifacts.require(\"ClaimHolderLibrary\")\nconst UserRegistry = artifacts.require(\"UserRegistry.sol\")\n\nlet prvSigner1 = Web3.utils.randomHex(32);\n//let pubSigner = web3.eth.accounts.privateKeyToAccount(prvSigner).address; //Code to create key for public signer\nlet attestation_1;\n\nconst data_text_1 = 'Verified OK';\n\nconst dataHash_1 = Web3.utils.asciiToHex(data_text_1);\n\ncontract(\"Identity integration\", accounts => {\n  let claimHolder, userRegistry\n\n  beforeEach(async function() {\n    userRegistry = await UserRegistry.new({from: accounts[0]});\n\n\t  let keyLibrary = await KeyHolderLibrary.new();\n\t  await ClaimHolderLibrary.link('KeyHolderLibrary', keyLibrary.address);\n\t  let claimLibrary = await ClaimHolderLibrary.new();\n\t  await ClaimHolderPresigned.link('KeyHolderLibrary', keyLibrary.address);\n\t  await ClaimHolderPresigned.link('ClaimHolderLibrary', claimLibrary.address);\n  })\n\n\tasync function predictIdentityAddress(wallet) {\n\t\tconst nonce = await new Promise(resolve => {\n\t\t\tWeb3.eth.getTransactionCount(wallet, (err, count) => {\n\t\t\t\tresolve(count)\n\t\t\t})\n\t\t})\n\t\tconst address =\n\t\t\t'0x' + Web3.utils.sha3(RLP.encode([wallet, nonce])).substring(26, 66)\n\t\treturn address.toString()\n\t}\n\n\tit(\"can create presigned\", async function() {\n\t\tvar claimType_1 = 1;\n\t\tlet predictAddress = await predictIdentityAddress(accounts[0]);\n\t\tvar hashed = Web3.utils.soliditySha3(predictAddress, claimType_1, dataHash_1);\n\t\tvar signed = await Web3.eth.accounts.sign(hashed, prvSigner1);\n\n\t\tattestation_1 = {\n\t\t\tclaimType: claimType_1,\n\t\t\tscheme: 1,\n\t\t\tissuer: accounts[1],\n\t\t\tsignature: signed.signature,\n\t\t\tdata: dataHash_1,\n\t\t\turi: \"\"\n\t\t}\n\t\tlet claimId = Web3.utils.soliditySha3(\n\t\t\tattestation_1.issuer,\n\t\t\tattestation_1.claimType\n\t\t)\n\t\tclaimHolder = await ClaimHolderPresigned.new(\n\t\t\taccounts[4],\n\t\t\taccounts[5],\n\t\t\tuserRegistry.address,\n\t\t\t[attestation_1.claimType],\n\t\t\t[attestation_1.issuer],\n\t\t\tattestation_1.signature,\n\t\t\tattestation_1.data,\n\t\t\t[data_text_1.length], { from: accounts[0] });\n\n\t\tassert.equal(predictAddress, claimHolder.address);\n\t\tlet fetchedClaim = await claimHolder.getClaim(claimId, { from: accounts[0] })\n\t\tassert.ok(fetchedClaim)\n\t\tlet [ claimType, scheme, issuer, signature, data, uri ] = fetchedClaim\n\t\tassert.equal(claimType.toNumber(), attestation_1.claimType)\n\t\tassert.equal(scheme.toNumber(), attestation_1.scheme)\n\t\tassert.equal(issuer, attestation_1.issuer)\n\t\tassert.equal(signature, attestation_1.signature)\n\t\tassert.equal(data, attestation_1.data)\n\t\tassert.equal(uri, attestation_1.uri)\n\t\tassert.equal(predictAddress, claimHolder.address);\n\t})\n\n\tit(\"should have set management key\", async function() {\n\t\tlet acctSha3 = Web3.utils.keccak256(accounts[4]);\n\t\tvar res = await claimHolder.getKey(acctSha3);\n\t\tassert.equal(new BigNumber(res[0]), '1');\n\t\tassert.equal(new BigNumber(res[1]), '1');\n\t\tassert.equal(res[2], acctSha3);\n\t})\n})\n"]}