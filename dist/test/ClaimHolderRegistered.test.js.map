{"version":3,"sources":["../../test/ClaimHolderRegistered.test.js"],"names":["web3Instance","require","Web3","ClaimHolderRegistered","artifacts","KeyHolderLibrary","ClaimHolderLibrary","UserRegistry","prvSigner1","utils","randomHex","prvSigner2","attestation_1","attestation_2","data_text_1","data_text_2","dataHash_1","asciiToHex","dataHash_2","contract","claimHolderRegistered","userRegistry","beforeEach","new","from","accounts","keyLibrary","link","address","claimLibrary","claimType_1","hashed","soliditySha3","eth","sign","signed","claimType_2","hashed2","sha3","signed2","claimType","scheme","issuer","signature","data","uri","it","claimId","addClaim","getClaim","fetchedClaim","assert","ok","equal","toNumber","addClaims","slice","length","claimId_1","fetchedClaim_1","scheme_1","issuer_1","signature_1","data_1","uri_1","claimId_2","fetchedClaim_2","scheme_2","issuer_2","signature_2","data_2","uri_2","users","identityAddress","notEqual"],"mappings":"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","file":"ClaimHolderRegistered.test.js","sourcesContent":["//This structure for ERC725/735 implements Origin Protocol Source Code\n//https://github.com/OriginProtocol/origin-js/tree/master/contracts\n\nvar web3Instance = require(\"web3\");\nvar Web3 = new web3Instance('ws://localhost:9545');\n\nconst ClaimHolderRegistered = artifacts.require(\"ClaimHolderRegistered.sol\")\nconst KeyHolderLibrary = artifacts.require(\"KeyHolderLibrary\")\nconst ClaimHolderLibrary = artifacts.require(\"ClaimHolderLibrary\")\nconst UserRegistry = artifacts.require(\"UserRegistry.sol\")\n\nlet prvSigner1 = Web3.utils.randomHex(32);\nlet prvSigner2 = Web3.utils.randomHex(32);\n//let pubSigner = web3.eth.accounts.privateKeyToAccount(prvSigner).address; //Code to create key for public signer\nlet attestation_1, attestation_2;\n\nconst data_text_1 = 'Verified OK';\nconst data_text_2 = 'Verified Not OK';\n\nconst dataHash_1 = Web3.utils.asciiToHex(data_text_1);\nconst dataHash_2 = Web3.utils.asciiToHex(data_text_2);\n\ncontract(\"ClaimHolderRegistered\", accounts => {\n  let claimHolderRegistered, userRegistry\n\n  beforeEach(async function() {\n    userRegistry = await UserRegistry.new({from: accounts[0]});\n\n\t  let keyLibrary = await KeyHolderLibrary.new();\n\t  await ClaimHolderLibrary.link('KeyHolderLibrary', keyLibrary.address);\n\t  let claimLibrary = await ClaimHolderLibrary.new();\n\t  await ClaimHolderRegistered.link('KeyHolderLibrary', keyLibrary.address);\n\t  await ClaimHolderRegistered.link('ClaimHolderLibrary', claimLibrary.address);\n      claimHolderRegistered = await ClaimHolderRegistered.new(accounts[4], accounts[5], userRegistry.address, { from: accounts[0] })\n\t  var claimType_1 = 1;\n\t  var hashed = Web3.utils.soliditySha3(claimHolderRegistered.address, claimType_1, dataHash_1);\n\t  var signed = await Web3.eth.accounts.sign(hashed, prvSigner1);\n\t  var claimType_2 = 2;\n\t  var hashed2 = Web3.utils.sha3(claimHolderRegistered.address, claimType_2, dataHash_2);\n\t  var signed2 = await Web3.eth.accounts.sign(hashed2, prvSigner2);\n\n\t  attestation_1 = {\n\t\t  claimType: claimType_1,\n\t\t  scheme: 1,\n\t\t  issuer: accounts[1],\n\t\t  signature: signed.signature,\n\t\t  data: dataHash_1,\n\t\t  uri: \"\"\n\t  }\n\t  attestation_2 = {\n\t\t  claimType: 2,\n\t\t  scheme: 1,\n\t\t  issuer: accounts[2],\n\t\t  signature: signed2.signature,\n\t\t  data: dataHash_2,\n\t\t  uri: \"\"\n\t  }\n  })\n\n  it(\"can add and get claim\", async function() {\n    let claimId = Web3.utils.soliditySha3(\n      attestation_1.issuer,\n      attestation_1.claimType\n    )\n    await claimHolderRegistered.addClaim(\n      attestation_1.claimType,\n      attestation_1.scheme,\n      attestation_1.issuer,\n      attestation_1.signature,\n      attestation_1.data,\n      attestation_1.uri,\n      { from: accounts[0] }\n    )\n    let fetchedClaim = await claimHolderRegistered.getClaim(claimId, { from: accounts[0] })\n    assert.ok(fetchedClaim)\n    let [ claimType, scheme, issuer, signature, data, uri ] = fetchedClaim\n    assert.equal(claimType.toNumber(), attestation_1.claimType)\n    assert.equal(scheme.toNumber(), attestation_1.scheme)\n    assert.equal(issuer, attestation_1.issuer)\n    assert.equal(signature, attestation_1.signature)\n    assert.equal(data, attestation_1.data)\n    assert.equal(uri, attestation_1.uri)\n  })\n\n  it(\"can batch add claims\", async function() {\n    await claimHolderRegistered.addClaims(\n      [ attestation_1.claimType, attestation_2.claimType ],\n      [ attestation_1.issuer, attestation_2.issuer ],\n      attestation_1.signature + attestation_2.signature.slice(2),\n      attestation_1.data + attestation_2.data.slice(2),\n      [data_text_1.length, data_text_2.length],\n      { from: accounts[0] }\n    );\n\n    let claimId_1 = Web3.utils.soliditySha3(\n      attestation_1.issuer,\n      attestation_1.claimType\n    )\n    let fetchedClaim_1 = await claimHolderRegistered.getClaim(claimId_1, { from: accounts[0] })\n    assert.ok(fetchedClaim_1)\n    let [ claimType_1, scheme_1, issuer_1, signature_1, data_1, uri_1 ] = fetchedClaim_1\n    assert.equal(claimType_1.toNumber(), attestation_1.claimType)\n    assert.equal(scheme_1.toNumber(), attestation_1.scheme)\n    assert.equal(issuer_1, attestation_1.issuer)\n    assert.equal(signature_1, attestation_1.signature)\n    assert.equal(data_1, attestation_1.data)\n    assert.equal(uri_1, attestation_1.uri)\n\n    let claimId_2 = Web3.utils.soliditySha3(\n      attestation_2.issuer,\n      attestation_2.claimType\n    )\n    let fetchedClaim_2 = await claimHolderRegistered.getClaim(claimId_2, { from: accounts[0] })\n    assert.ok(fetchedClaim_2)\n    let [ claimType_2, scheme_2, issuer_2, signature_2, data_2, uri_2 ] = fetchedClaim_2\n    assert.equal(claimType_2.toNumber(), attestation_2.claimType)\n    assert.equal(scheme_2.toNumber(), attestation_2.scheme)\n    assert.equal(issuer_2, attestation_2.issuer)\n    assert.equal(signature_2, attestation_2.signature)\n    assert.equal(data_2, attestation_2.data)\n    assert.equal(uri_2, attestation_2.uri)\n  })\n\n  it(\"registers the user\", async function() {\n    let identityAddress = await userRegistry.users(accounts[4])\n    assert.ok(identityAddress)\n    assert.notEqual(identityAddress, \"0x0000000000000000000000000000000000000000\")\n  })\n})\n"]}