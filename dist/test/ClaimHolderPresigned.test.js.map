{"version":3,"sources":["../../test/ClaimHolderPresigned.test.js"],"names":["Web3","require","ClaimHolder","artifacts","ClaimHolderLibrary","KeyHolderLibrary","ClaimHolderPresigned","UserRegistry","signature_1","signature_2","dataHash_1","dataHash_2","contract","attestation_1","claimType","scheme","issuer","accounts","signature","data","uri","attestation_2","it","new","from","userRegistry","keyLibrary","link","address","claimLibrary","slice","instance","claimId_1","utils","soliditySha3","getClaim","fetchedClaim_1","assert","ok","claimType_1","scheme_1","issuer_1","data_1","uri_1","equal","toNumber","claimId_2","fetchedClaim_2","claimType_2","scheme_2","issuer_2","data_2","uri_2","users","identityAddress","notEqual"],"mappings":"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","file":"ClaimHolderPresigned.test.js","sourcesContent":["//This structure for ERC725/735 implements Origin Protocol Source Code\n//https://github.com/OriginProtocol/origin-js/tree/master/contracts\n\nvar Web3 = require('web3');\nconst ClaimHolder = artifacts.require(\"ClaimHolder\")\nconst ClaimHolderLibrary = artifacts.require(\"ClaimHolderLibrary\")\nconst KeyHolderLibrary = artifacts.require(\"KeyHolderLibrary\")\nconst ClaimHolderPresigned = artifacts.require(\"ClaimHolderPresigned\")\nconst UserRegistry = artifacts.require(\"UserRegistry\")\n\nconst signature_1 = \"0xeb6123e537e17e2c67b67bbc0b93e6b25ea9eae276c4c2ab353bd7e853ebad2446cc7e91327f3737559d7a9a90fc88529a6b72b770a612f808ab0ba57a46866e1c\"\nconst signature_2 = \"0x061ef9cdd7707d90d7a7d95b53ddbd94905cb05dfe4734f97744c7976f2776145fef298fd0e31afa43a103cd7f5b00e3b226b0d62e4c492d54bec02eb0c2a0901b\"\n\nconst dataHash_1 = \"0x4f32f7a7d40b4d65a917926cbfd8fd521483e7472bcc4d024179735622447dc9\"\nconst dataHash_2 = \"0xa183d4eb3552e730c2dd3df91384426eb88879869b890ad12698320d8b88cb48\"\n\ncontract(\"ClaimHolderPresigned\", accounts => {\n  let attestation_1 = {\n    claimType: 1,\n    scheme: 1,\n    issuer: accounts[1],\n    signature: signature_1,\n    data: dataHash_1,\n    uri: \"\"\n  };\n  let attestation_2 = {\n      claimType: 2,\n      scheme: 1,\n      issuer: accounts[2],\n      signature: signature_2,\n      data: dataHash_2,\n      uri: \"\"\n  };\n\n  it(\"should deploy identity with attestations\", async function() {\n    let userRegistry = await UserRegistry.new( { from: accounts[0] } )\n\t  let keyLibrary = await KeyHolderLibrary.new();\n\t  await ClaimHolderLibrary.link('KeyHolderLibrary', keyLibrary.address);\n\t  let claimLibrary = await ClaimHolderLibrary.new();\n\t  await ClaimHolderPresigned.link('KeyHolderLibrary', keyLibrary.address);\n\t  await ClaimHolderPresigned.link('ClaimHolderLibrary', claimLibrary.address);\n    let instance = await ClaimHolderPresigned.new(accounts[4],\n      accounts[5],\n      userRegistry.address,\n      [ attestation_1.claimType, attestation_2.claimType ],\n      [ attestation_1.issuer, attestation_2.issuer ],\n      attestation_1.signature + attestation_2.signature.slice(2),\n      attestation_1.data + attestation_2.data.slice(2),\n      [32, 32],\n      { from: accounts[0] }\n    );\n\n    // Check attestation 1\n    let claimId_1 = Web3.utils.soliditySha3(attestation_1.issuer, attestation_1.claimType)\n    let fetchedClaim_1 = await instance.getClaim(claimId_1, { from: accounts[0] })\n    assert.ok(fetchedClaim_1)\n    let [ claimType_1, scheme_1, issuer_1, signature_1, data_1, uri_1 ] = fetchedClaim_1\n    assert.equal(claimType_1.toNumber(), attestation_1.claimType)\n    assert.equal(scheme_1.toNumber(), attestation_1.scheme)\n    assert.equal(issuer_1, attestation_1.issuer)\n    assert.equal(signature_1, attestation_1.signature)\n    assert.equal(data_1, attestation_1.data)\n    assert.equal(uri_1, attestation_1.uri)\n\n    // Check attestation 2\n    let claimId_2 = Web3.utils.soliditySha3(attestation_2.issuer, attestation_2.claimType)\n    let fetchedClaim_2 = await instance.getClaim(claimId_2, { from: accounts[0] })\n    assert.ok(fetchedClaim_2)\n    let [ claimType_2, scheme_2, issuer_2, signature_2, data_2, uri_2 ] = fetchedClaim_2\n    assert.equal(claimType_2.toNumber(), attestation_2.claimType)\n    assert.equal(scheme_2.toNumber(), attestation_2.scheme)\n    assert.equal(issuer_2, attestation_2.issuer)\n    assert.equal(signature_2, attestation_2.signature)\n    assert.equal(data_2, attestation_2.data)\n    assert.equal(uri_2, attestation_2.uri)\n\n    // Check user registry\n    let identityAddress = await userRegistry.users(accounts[4])\n    assert.ok(identityAddress)\n    assert.notEqual(identityAddress, \"0x0000000000000000000000000000000000000000\")\n  })\n})\n"]}